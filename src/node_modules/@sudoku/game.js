import { cursor } from './stores/cursor';
import { difficulty } from './stores/difficulty';
import { gamePaused } from './stores/game';
import { grid, userGrid } from './stores/grid';
import { timer } from './stores/timer';
import { hints } from './stores/hints';
import { writable, get } from 'svelte/store';
import { GAME_MODES, SUDOKU_SIZE } from '@sudoku/constants';


export const gameMode = writable(GAME_MODES.PLAY);


export function startCreatorMode() {
  gameMode.set(GAME_MODES.CREATE);
  gamePaused.set(true);
  grid.resetToEmpty();
  cursor.reset();
  timer.reset();
  timer.stop();
  hints.reset();
}


export function finishCreatorMode() {
	const $userGrid = get(userGrid);
	const newGrid = $userGrid.map(row => row.slice());
	grid.subscribe($grid => {
		for (let y = 0; y < SUDOKU_SIZE; y++) {
			for (let x = 0; x < SUDOKU_SIZE; x++) {
				$grid[y][x] = newGrid[y][x];
			}
		}
	})();

	gameMode.set(GAME_MODES.PLAY);
	gamePaused.set(false);
	timer.reset();
	difficulty.setCustom();
}


/**
 * Start new game with a generated sudoku
 *
 * @param {('veryeasy' | 'easy' | 'medium' | 'hard')} diff - Difficulty
 */
export function startNew(diff) {
	difficulty.set(diff);
	grid.generate(diff);
	cursor.reset();
	timer.reset();
	hints.reset();

	location.hash = '';
}

/**
 * Start new game with a custom sudoku
 *
 * @param {string} sencode - Sencode to decode
 */
export function startCustom(sencode) {
	difficulty.setCustom();
	grid.decodeSencode(sencode);
	cursor.reset();
	timer.reset();
	hints.reset();
}

/**
 * Pause the game
 */
export function pauseGame() {
	timer.stop();
	gamePaused.set(true);
}

/**
 * Resume (un-pause) the game
 */
export function resumeGame() {
	timer.start();
	gamePaused.set(false);
}

export default {
	startCreatorMode,
	finishCreatorMode,
	startNew,
	startCustom,
	pause: pauseGame,
	resume: resumeGame
};